
@{
    ViewBag.Title = "blog# - Activity";
}

<style>
    #map {
        position: relative;
        width: 500px;
        height: 500px;
        border: 0px;
    }
</style>

<h2>blog# - Activity</h2>
<p>Check out where our bloggers are across the world and what they've been up to.</p>

<script src="http://dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0" type="text/javascript"></script>
<script type="text/javascript" src="~/scripts/jquery-1.10.2.min.js"></script>
<div id="map"></div>

<script>

    var map = null;
    var infobox = null;

    function initMap () {
        var map = new Microsoft.Maps.Map($("#map")[0],
            {
                credentials: "@Environment.GetEnvironmentVariable("BING_MAPS_KEY")",
                center: new Microsoft.Maps.Location(40.7128, 296),
                mapTypeId: Microsoft.Maps.MapTypeId.road,
                zoom: 3
            });

        var points = @Html.Raw(ViewBag.geocodes);
        var blogNames = @Html.Raw(ViewBag.blogNames);
        var ids = @Html.Raw(ViewBag.ids);
        var postDates = @Html.Raw(ViewBag.postDates);

        // Thanks to this blogger for providing help/clarification on how to get
        // pins and infoboxes to work nicely together
        // https://rbrundritt.wordpress.com/2011/10/13/multiple-pushpins-and-infoboxes-in-bing-maps-v7/

        // create underlying data layers for the pins and the infobox
        // note that we still use a collection for the infobox even though there will
        // ultimately be just a single one
        var pins = new Microsoft.Maps.EntityCollection();
        var infoboxLayer = new Microsoft.Maps.EntityCollection();

        map.entities.push(pins);
        map.entities.push(infoboxLayer);

        infobox = new Microsoft.Maps.Infobox(new Microsoft.Maps.Location(0,0), {visible:false});

        infoboxLayer.push(infobox);

        for (var i = 0; i < points.length; i++) {
            // get new lat/long
            var latitude = points[i].Latitude;
            var longitude = points[i].Longitude;

            var location = new Microsoft.Maps.Location(latitude, longitude);

            // add pin, supply the blogname as content
            // add an infobox as well - it will only appear
            // when the mouse hovers over the pin

            var pin = new Microsoft.Maps.Pushpin(location);
            pin.Title = blogNames[i];
            pin.Description = "<p>Last updated: " + postDates[i] + "</p><br />" +
                              "<a href=\"../Blog/Profile/" + ids[i] + "\">Check out their blog</a>";

            Microsoft.Maps.Events.addHandler(pin, 'mouseover', showInfobox);
            // Microsoft.Maps.Events.addHandler(pin, 'mouseout', hideInfobox);

            pins.push(pin)
        }
    }

    // This is the way Microsoft's documentation does it (as well as some others),
    // although one could also define these as anonymous functions
    // in the 'mouseout' and 'mouseover' event constructors

    function showInfobox(e) {
        if (e.targetType == 'pushpin') {
            infobox.setLocation(e.target.getLocation());
            infobox.setOptions({title: e.target.Title,
                description: e.target.Description,
                visible:true, offset: new Microsoft.Maps.Point(0,25)});

        }

    }

    function hideInfobox(e) {
        infobox.setOptions({visible:false});
    }

    initMap();

</script>

<p>See who the most prolific bloggers are</p>

<canvas id="bloggerChart" width="720" height="200"></canvas>
<br />



<script>

    $(document).ready(function() {
        $.ajax({
            type: "POST",
            url: "../Blog/GetTopBloggers",
            data: {},
            success: function (result) {
                var topBloggerLabels = JSON.parse(result).Labels;
                var topBloggerPostCounts = JSON.parse(result).postCount;
                var topBloggersData = {
                    labels: topBloggerLabels,
                    datasets: [{
                        label: '# of posts',
                        data: topBloggerPostCounts,
                    }],
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero:true
                                }
                            }]
                        }
                    }
                };

                var chartContext = document.getElementById("bloggerChart").getContext("2d");

                var chart = new Chart(chartContext, {type: 'bar', data: topBloggersData});

            },
            error: function() {
                alert("There's no top blogger graph because we don't have any bloggers yet!  Make an account today!");
            }
        });
    });

</script>

<p>Curious about tag trends?  Compare two tags to see how their popularity has fared over time!</p>

<canvas id="tagChart" width="720" height="200"></canvas>

<script>
    // generate generic chart on the page load; populate it later when the user supplies two tags

    $(document).ready(function() {
        $.ajax({
            type: "POST",
            url: "../Blog/GetTagComparison",
            data: {},
            success: function(result) { 
                toastr.info("Guess what?  We have enough data for this week to generate the tag trends graph.  We're making it now...")
                var tags = JSON.parse(result).TagNames;
                var tag1_data = JSON.parse(result).Tag1;
                var tag2_data = JSON.parse(result).Tag2;
                var tag3_data = JSON.parse(result).Tag3;
                var tag4_data = JSON.parse(result).Tag4;
                var tag5_data = JSON.parse(result).Tag5;

                var tagData = {
                    labels: ['Two weeks ago', 'Last week', 'This week'],
                    datasets: [{
                        label: tags[0],
                        backgroundColor: 'rgba(40, 70, 161, 0.6)',
                        borderColor: 'rgba(40, 70, 161, 1)',
                        data: tag1_data
                    },{
                        label: tags[1],
                        backgroundColor: 'rgba(40, 195, 103, 0.6)',
                        borderColor: 'rgba(40, 195, 103, 1)',
                        data: tag2_data
                    },{
                        label: tags[2],
                        backgroundColor: 'rgba(244, 171, 16, 0.6)',
                        borderColor: 'rgba(244, 171, 16, 1)',
                        data: tag3_data
                    },{
                        label: tags[3],
                        backgroundColor: 'rgba(244, 38, 42, 0.6)',
                        borderColor: 'rgba(244, 38, 42, 1)',
                        data: tag4_data
                    },{
                        label: tags[4],
                        backgroundColor: 'rgba(180, 46, 222, 0.6)',
                        borderColor: 'rgba(180, 46, 222, 1)',
                        data: tag5_data
                    }],
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero:true
                                }
                            }]
                        }
                    }
                };

                var chartContext = document.getElementById("tagChart").getContext("2d");

                var chart = new Chart(chartContext, {type: 'line', data: tagData});

            },
            error: function() {
                alert("Sorry, we don't have enough activity this week for the trends graph.  Try visiting the page later.");
            }
        });
    });

        //$(document).ready(function() {
        //    var tagData = {
        //        labels: ["Two weeks ago", "Last week", "This week"],
        //        datasets: [{
        //            label: 'Tag 1',
        //            backgroundColor: 'rgba(40, 70, 161, 0.6)',
        //            borderColor: 'rgba(40, 70, 161, 1)',
        //            data: [0, 100, 50]
        //        },{
        //            label: 'Tag 2',
        //            backgroundColor: 'rgba(40, 195, 103, 0.6)',
        //            borderColor: 'rgba(40, 195, 103, 1)',
        //            data: [25, 50, 200]
        //        }],
        //        options: {
        //            scales: {
        //                yAxes: [{
        //                    ticks: {
        //                        beginAtZero:true
        //                    }
        //                }]
        //            }
        //        }
        //    };

        //    var chartContext = document.getElementById("tagChart").getContext("2d");

        //    var chart = new Chart(chartContext, {type: 'line', data: tagData});
        //});




</script>
